generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  supabaseId   String   @unique
  email        String   @unique
  name         String?
  phone        String?
  address      String?
  role         String   @default("customer")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
  cart         Cart?
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  products    Product[]
}

model Product {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  description String
  price       Float
  currency    String         @default("LKR")
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  status      String         @default("active")
  stock       Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  images      ProductImage[]
  variants    ProductVariant[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model ProductVariant {
  id            String  @id @default(uuid())
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  sku           String  @unique
  name          String
  attributes    Json
  priceOverride Float?
  stock         Int
}

model ProductImage {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  url       String
  alt       String?
  position  Int     @default(0)
}

model Cart {
  id        String     @id @default(uuid())
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  
  @@unique([cartId, productId])
}

model Order {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  orderNumber   String      @unique
  status        String      @default("pending")
  totalAmount   Float
  currency      String      @default("LKR")
  paymentMethod String      @default("cod")
  shippingAddress Json
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  total     Float
}